getwd()
setwd(~)
setwd("~")
getwd()
if(commandArgs()[1] == "RStudio"){
# set working directory to path of current script if opened in RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# enable unstable forking in RStudio
options(parallelly.fork.enable = TRUE)
} else {
message(paste("Make sure to set working directory manually to folder where",
"mainfile.R is located before sourcing files."))
}
getwd()
source("05_functions/plot_functions.R")
# Set working directory
if(commandArgs()[1] == "RStudio"){
# set working directory to path of current script if opened in RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# enable unstable forking in RStudio
options(parallelly.fork.enable = TRUE)
} else {
message(paste("Make sure to set working directory manually to folder where",
"mainfile.R is located before sourcing files."))
}
# prepare workspace
source("05_functions/preparations.R")
99
if(commandArgs()[1] == "RStudio"){
# set working directory to path of current script if opened in RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# enable unstable forking in RStudio
options(parallelly.fork.enable = TRUE)
} else {
message(paste("Make sure to set working directory manually to folder where",
"mainfile.R is located before sourcing files."))
}
# prepare workspace
source("05_functions/preparations.R")
source("05_functions/preparations.R")
map_HBS_item_codes <- read_xlsx("00_data/manual_input/categorization_fooditems.xlsx",
sheet = "HBS_"%&%config$categorization) %>%
select(item_code_orig, category_name_new,
category_code_new, item_code_new) %>%
filter(!is.na(item_code_new)) %>%
mutate(item_code_orig = gsub("EUR_HE", "", item_code_orig))
read_xlsx("00_data/manual_input/categorization_fooditems.xlsx",
sheet = "HBS_"%&%config$categorization)
read_xlsx("00_data/manual_input/categorization_fooditems.xlsx",
sheet = "HBS_"%&%config$categorization) %>%
select(item_code_orig, category_name_new,
category_code_new, item_code_new)
read_xlsx("00_data/manual_input/categorization_fooditems.xlsx",
sheet = "HBS_"%&%config$categorization) %>%
select(item_code_orig, category_name_new,
category_code_new, item_code_new) %>%
filter(!is.na(item_code_new))
read_xlsx("00_data/manual_input/categorization_fooditems.xlsx",
sheet = "HBS_"%&%config$categorization) %>%
select(item_code_orig, category_name_new,
category_code_new, item_code_new) %>%
filter(!is.na(item_code_new)) %>%
mutate(item_code_orig = gsub("EUR_HE", "", item_code_orig))
map_HBS_item_codes
map_EVS_item_codes <- read_xlsx("00_data/manual_input/categorization_fooditems.xlsx",
sheet = "EVS_"%&%config$categorization) %>%
select(item_code_orig, category_code_new, category_name_new) %>%
filter(!is.na(item_code_orig))
map_EVS_item_codes
map_K14_item_codes <- read_xlsx("00_data/manual_input/categorization_fooditems.xlsx",
sheet = "HBS_"%&%config$categorization) %>%
transmute(item_code_orig = gsub("EUR_HE", "", item_code_orig),
item_name_orig_2015,
item_code_AT)
map_K14_item_codes
map_HBS_item_codes
map_HBS_item_codes %>%
filter(!is.na(category_code_new))
map_HBS_item_codes %>%
filter(!is.na(category_code_new)) %>%
dplyr::transmute(category_code_new = as.character(category_code_new),
category_name_new)
map_HBS_item_codes %>%
filter(!is.na(category_code_new)) %>%
dplyr::transmute(category_code_new = as.character(category_code_new),
category_name_new) %>%
distinct()
map_HBS_item_codes %>%
filter(!is.na(category_code_new)) %>%
dplyr::transmute(category_code_new = as.character(category_code_new),
category_name_new) %>%
distinct() %>%
arrange(as.numeric(category_code_new))
# Load manually defined names for aggregated food categories and save as .csv
catexplain <- map_HBS_item_codes %>%
filter(!is.na(category_code_new)) %>%
dplyr::transmute(category_code_new = as.character(category_code_new),
category_name_new) %>%
distinct() %>%
arrange(as.numeric(category_code_new))
catexplain
